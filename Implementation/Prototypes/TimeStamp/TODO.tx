- Struktur für Kommentare überlegen
- Programmierrichtlinien festlegen 
	- Namespaces sinnvoll kürzen z.B. Tsa.timeStamp
	- Dateinamen kleinschreiben und in CamelCase
	- variablen und methoden klein schreiben und in CamelCase
	- Konstruktoren groß schreiben
	- Konstanten komplett in groß schreiben
	- Namespaces klein schreiben
	- Ordner klein schreiben
	- member mit "m_" anfangen und mit großem Buchstaben beginnen z.B. m_TimeStamp
- warum ist die app so groß? wegen DB?
- yuidoc in external Tools einbinden und tutorial machen
- github besprechen
- Fehlerbehandlung besprechen
- Projektstruktur anlegen und dokumentieren
	- Dokumentation
	- Implementaion
	- Organisation
	- Release
- Designrichtlinien besprechen
- formattierungstool anpassen
- tutorials machen
- apiomat testen
- Namespace für Projekt anlegen z.B. tsa.app.controllers



function signup()
{
    var user = new Apiomat.User();
    user.setUserName("ganjabas");
    user.setPassword("");
    Apiomat.Datastore.configure(user);
 
    var saveCB = {
        onOk: function() {
            alert('Saved user successfully');
            loadBooks();
        },
        onError: function(error) {
            alert('Some error occured. ' + error.statusCode + ' --> ' + error.message);
        }
    };
    user.loadMe({
        onOk: function() {
            alert('Successfully logged in');
            loadBooks();
        },
        onError: function(error) {
            alert('User doesn\'t exist. Will create new one...');
            user.save(saveCB);
        }
    });
}

// gets all books from the backend
function loadBooks() {
    // filter if you want to. Like "Apiomat.Book.getBooks('author=="Author Newman"', ..."
    // Apiomat.Book.getBooks(undefined, {
        // onOk: function(loadedBooks) {
            // myBooks.reset();
            // if (typeof loadedBooks !== 'undefined')
            // {
                // for (var i=0; i  ' + error.message);
        // }
    // });
}